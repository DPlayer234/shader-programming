cbuffer UniformBuffer
{
	matrix world;
	matrix view;
	matrix projection;
	float4 lightPos;

	float4 diffuseAlbedo;
	float4 specularAlbedo;
	float specularPower;
};

Texture2D stexture;
SamplerState sampleType;

struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 color : COLOR;
	float2 tex : TEXCOORD0;
	float3 V : V;
	float3 N : N;
	float3 L : L;
};

float4 main(PixelInputType input) : SV_TARGET
{
	float3 N = normalize(input.N);
	float3 V = normalize(input.V);
	float3 L = normalize(input.L);
	float3 H = normalize(L + V);
	
	float4 diffuse = max(dot(N, L), 0.0f) * diffuseAlbedo;
	float4 specular = pow(max(dot(N, H), 0.0f), specularPower) * specularAlbedo;

	return stexture.Sample(sampleType, input.tex) * input.color * float4((diffuse + specular).xyz, max(1.0f, diffuse.a + specular.a));
}
